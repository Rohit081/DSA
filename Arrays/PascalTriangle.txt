Q: Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]

Soln:

package com.java;

import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) {
        System.out.println(generate(5));
    }

    public static List<List<Integer>> generate(int numRows) {
        List<List<Integer>> pascalArr = new ArrayList<>();
        for(int i = 0; i < numRows; i++){
            List<Integer> pascalList = new ArrayList<>();
            for(int j = 0; j <= i; j++){
                if(j==0 || j==i){
                    pascalList.add(1);
                }else{
                    pascalList.add(pascalArr.get(i-1).get(j-1) + pascalArr.get(i-1).get(j));
                }
            }
            pascalArr.add(pascalList);
        }
        return pascalArr;
    }
}


-----------------------------------------------------------------------------------------------------------------


Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]



Soln:


package com.java;

import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) {
        System.out.println(getRow(0));
    }

    public static List<Integer> getRow(int rowIndex) {
        List<List<Integer>> pascalTriangle = new ArrayList<>();
        for(int i = 0; i <= rowIndex; i++){
            List<Integer> pascalRow = new ArrayList<>();
            for(int j = 0; j<=i; j++){
                if(j == 0 || j == i){
                    pascalRow.add(1);
                }
                else {
                    pascalRow.add(pascalTriangle.get(i-1).get(j-1)+pascalTriangle.get(i-1).get(j));
                }
            }
            pascalTriangle.add(pascalRow);
        }
        return pascalTriangle.get(rowIndex);
    }
}


