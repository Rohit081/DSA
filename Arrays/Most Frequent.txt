Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

Soln:


public class Main {

    public static void main(String[] args) {
        System.out.println(majorityElement(new int[]{2,2,1,1,1,2,2,1,1,1,1,1,1}));
    }

    public static int majorityElement(int[] nums) {
        HashMap<Integer,Integer> majorityMap = new HashMap<>();
        int maxFrequency = 0;
        int majorityEle = nums[0];
        for (int i =0; i < nums.length; i++) {
            int currentFrequency = 0;
            if(majorityMap.containsKey(nums[i])) {
                currentFrequency = majorityMap.get(nums[i])+1;
                majorityMap.put(nums[i], currentFrequency);
            }else {
                majorityMap.put(nums[i],1);
            }
            if(currentFrequency > maxFrequency){
                maxFrequency = currentFrequency;
                majorityEle = nums[i];
            }
        }
        return majorityEle;
    }
}

-------------------------------------------------------------------------------------------------------------------
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109

Soln:


class Solution {
    public List<Integer> majorityElement(int[] nums) {
        HashMap<Integer,Integer> majorityMap = new HashMap<>();
        Set<Integer> majorityList = new HashSet<>();

        for (int i =0; i < nums.length; i++) {
            int currentFrequency = 0;
            if(majorityMap.containsKey(nums[i])) {
                currentFrequency = majorityMap.get(nums[i])+1;
                majorityMap.put(nums[i], currentFrequency);
            }else {
                majorityMap.put(nums[i],1);
                currentFrequency = 1;
            }
            if(currentFrequency  > nums.length/3 ){
                majorityList.add(nums[i]);
            }
        }
        return majorityList.stream().collect(Collectors.toList());
    }
}


Better Soln:


class Solution {
    public List<Integer> majorityElement(int[] nums) {
       HashMap<Integer,Integer> majorityMap = new HashMap<>();
        List<Integer> majorityList = new ArrayList<>();

        for (int i =0; i < nums.length; i++) {
            int currentFrequency = 0;
            if(majorityMap.containsKey(nums[i])) {
                currentFrequency = majorityMap.get(nums[i])+1;
                majorityMap.put(nums[i], currentFrequency);
            }else {
                majorityMap.put(nums[i],1);
            }
        }
        for (Map.Entry<Integer,Integer> entry : majorityMap.entrySet()) {
            if(entry.getValue()  > nums.length/3 ){
                majorityList.add(entry.getKey());
            }
        }
        return majorityList;
    }
}